---
import { getRelativeLocaleUrl } from "astro:i18n";
import { languages } from "@i18n/constants";
import { getPathWithoutLang } from "@i18n/utils";

const currentLocale = Astro.currentLocale;
const supportedLanguages = Astro.locals.supportedLanguages;
const pathname = getPathWithoutLang(Astro.url);
---

<div class="relative inline-block">
	<button
		id="language-button"
		type="button"
		class="inline-flex items-center bg-transparent pl-9 pr-8 py-1 cursor-pointer text-sm"
		aria-expanded="false"
		aria-haspopup="true"
	>
		{languages[currentLocale as keyof typeof languages] ?? currentLocale}
		<div class="absolute left-2">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5">
				<path stroke-linecap="round" stroke-linejoin="round" d="M12 21a9.004 9.004 0 0 0 8.716-6.747M12 21a9.004 9.004 0 0 1-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 0 1 7.843 4.582M12 3a8.997 8.997 0 0 0-7.843 4.582m15.686 0A11.953 11.953 0 0 1 12 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0 1 21 12c0 .778-.099 1.533-.284 2.253m0 0A17.919 17.919 0 0 1 12 16.5c-3.162 0-6.133-.815-8.716-2.247m0 0A9.015 9.015 0 0 1 3 12c0-1.605.42-3.113 1.157-4.418" />
			</svg>
		</div>
		<div class="absolute right-2">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4">
				<path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" />
			</svg>
		</div>
	</button>

	<div id="language-menu" class="absolute right-0 bottom-full mb-2 hidden bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 min-w-28 text-primary">
		<div class="py-1" role="menu">
			{supportedLanguages.map((locale) => (
				<a
					href={getRelativeLocaleUrl(locale, pathname)}
					class:list={[
						"block px-4 py-2 text-sm hover:bg-gray-200",
						{ "bg-gray-100": currentLocale === locale }
					]}
					role="menuitem"
					hreflang={locale}
				>
					{languages[locale as keyof typeof languages] ?? locale}
				</a>
			))}
		</div>
	</div>
</div>

<script>
	const button = document.getElementById('language-button');
	const menu = document.getElementById('language-menu');

	button?.addEventListener('click', () => {
		const expanded = button.getAttribute('aria-expanded') === 'true';
		button.setAttribute('aria-expanded', (!expanded).toString());
		menu?.classList.toggle('hidden');
	});

	// Save the current locale to cookies on click item
	menu?.addEventListener('click', (e) => {
		const locale = (e.target as HTMLAnchorElement).getAttribute('hreflang');
		if (locale) {
			document.cookie = `locale=${locale}; path=/; max-age=31536000`;
		}
	});

	// Close menu when clicking outside
	document.addEventListener('click', (e) => {
		if (!button?.contains(e.target as Node) && !menu?.contains(e.target as Node)) {
			button?.setAttribute('aria-expanded', 'false');
			menu?.classList.add('hidden');
		}
	});
</script>
